# Absolute/relative path to video or camera input of traffic scene
# E.g "./data/videos/sample_traffic_scene.mp4" or 1
VIDEO="./data/videos/sample_traffic_scene.mp4"

# Specify if video capture is from a camera
IS_CAM=False

# Specify a detection Region of Interest (ROI)
# i.e a set of vertices that represent the area (polygon) where you want detections to be made
# E.g [(750, 405), (1094, 398), (1569, 1028), (501, 1028)]
# Default: [(0, 0), (frame_width, 0), (frame_width, frame_height), (0, frame_height)] (i.e the whole video frame)
DROI=[(750, 405), (1094, 398), (1569, 1028), (501, 1028)]
USE_DROI=True
SHOW_DROI=True # Display/overlay the detection ROI on the video

# Display cumulative counts on the video
SHOW_COUNTS=False

# Maximum consecutive detection failures i.e number of detection failures
# before it's concluded that an object is no longer in the frame
MCDF=2

# Maximum consecutive tracking failures i.e number of tracking failures
# before the tracker concludes the tracked object has left the frame
MCTF=3

# Detection interval i.e number of frames before detection is carried out again
# (in order to find new vehicles and update the trackers of old ones)
DI=10

# Model/algorithm to use for vehicle detection (options: yolo, tfoda, haarcascade)
DETECTOR="yolo"

# Enable GPU acceleration to get better performance
ENABLE_GPU_ACCELERATION=True

# Algorithm to use for vehicle tracking (options: kcf, csrt)
TRACKER="kcf"

# Record vehicle counting as video
RECORD=True

# Set path where recorded video will be stored
OUTPUT_VIDEO_PATH="./data/videos/output.avi"

# Run VCS without UI display
HEADLESS=True

# Specify one or more counting lines
# A counting line is represented by a label and line segment
# E.g {'label': 'A', 'line': [(667, 713), (888, 713)]}
COUNTING_LINES=[{'label': 'A', 'line': [(667, 713), (888, 713)]}, {'label': 'B', 'line': [(1054, 866), (1423, 868)]}]

# Configs for Haar Cascade detector
HAAR_CASCADE_PATH="./data/detectors/haarcascade/car.xml"

# Configs for TFODA (Tensorflow Object Detection API) detector
# For the weights path, if using tfoda_new ensure you include the saved_model/ folder
TFODA_WEIGHTS_PATH="./data/detectors/tfoda/faster_rcnn_inception_v2_coco_2018_01_28.pb"
TFODA_CONFIG_PATH="./data/detectors/tfoda/faster_rcnn_inception_v2_coco_2018_01_28.pbtxt"
TFODA_MODEL_DIR="./data/detectors/tfoda/faster_rcnn_inception_v2_coco_2018_01_28/saved_model"
TFODA_CLASSES_PATH="./data/detectors/coco_classes.txt"
TFODA_CLASSES_OF_INTEREST_PATH="./data/detectors/coco_classes_of_interest.txt"
TFODA_CONFIDENCE_THRESHOLD=0.5

# Configs for YOLO (You Only Look Once) detector
YOLO_WEIGHTS_PATH="./data/detectors/yolo/yolov3.weights"
YOLO_CONFIG_PATH="./data/detectors/yolo/yolov3.cfg"
YOLO_CLASSES_PATH="./data/detectors/coco_classes.txt"
YOLO_CLASSES_OF_INTEREST_PATH="./data/detectors/classes_of_interest.txt"
YOLO_DATA_PATH="./data/detectors/coco.data"
YOLO_CONFIDENCE_THRESHOLD=0.5

# Configs for Detectron2 detector
DETECTRON2_CONFIDENCE_THRESHOLD=0.5
DETECTRON2_CONFIG_PATH="./data/detectors/detectron2/Base-RCNN-FPN.yaml"
DETECTRON2_WEIGHTS_PATH="./data/detectors/detectron2/R50-FPN_model_final_b275ba.pkl"
DETECTRON2_NUM_CLASSES=80
DETECTRON2_CLASSES_PATH="./data/detectors/coco_classes.txt"
DETECTRON2_CLASSES_OF_INTEREST_PATH="./data/detectors/coco_classes_of_interest.txt"

# Log destinations
ENABLE_CONSOLE_LOGGER=True
ENABLE_FILE_LOGGER=True
ENABLE_LOGSTASH_LOGGER=False
ENABLE_API_LOGGER=True

# Absolute/relative path to log files directory
LOG_FILES_DIRECTORY="./data/logs/"

# Size of window used to view the vehicle counting process
DEBUG_WINDOW_SIZE=(858, 480)

# API URL for remote logging
API_HOST="ensxi4bbgphap.x.pipedream.net"
API_URL="/"